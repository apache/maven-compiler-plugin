<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.apache.maven.plugins.compiler.it</groupId>
  <artifactId>mcompiler349-test</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <description>
    IT test to verify that dependent-module recompile, when run 'mvn compile' without 'clean' if module dependency
    changed.
    The compilation should fail as dependent-module use method that is no longer exists (run() method of TestService
    renamed to
    newMethodName()).
  </description>

  <modules>
    <module>dependent-module</module>
    <module>service</module>
  </modules>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>@project.version@</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.gmaven</groupId>
          <artifactId>groovy-maven-plugin</artifactId>
          <version>2.0</version>
          <configuration>
            <source>
              def fileToModify = new File(project.basedir, 'service/src/main/java/TestService.java')
              processFileInplace(fileToModify) { text ->
                text.replaceAll(/run/, 'newMethodName')
              }

              def processFileInplace(file, Closure processText) {
                file.write(processText(file.text))
              }
            </source>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

</project>


